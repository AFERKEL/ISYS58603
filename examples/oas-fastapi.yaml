openapi: 3.0.0
info:
  title: Chinook API
  description: API for the Chinook music store
  version: "0.1"
servers:
  - url: http://localhost:8000
    description: Local development server
paths:
  /tracks/:
    get:
      summary: Get the list of tracks
      description: Retrieve a list of tracks from the database with optional filtering.
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: The number of tracks to skip.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: The number of tracks to return.
        - in: query
          name: band
          schema:
            type: string
          description: The band name to filter by.
        - in: query
          name: name
          schema:
            type: string
          description: The track name to filter by.
        - in: query
          name: genre
          schema:
            type: string
          description: The genre to filter by.
      responses:
        '200':
          description: A list of tracks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'

  /albums/:
    get:
      summary: Get the list of albums
      description: Retrieve a list of albums from the database with optional track details.
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: The number of albums to skip.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: The number of albums to return.
        - in: query
          name: include_tracks
          schema:
            type: boolean
            default: false
          description: Whether to include the track details for each album.
      responses:
        '200':
          description: A list of albums
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Album'

  /album/{album_id}/tracks/:
    get:
      summary: Get tracks for a specific album
      description: Retrieve tracks associated with a specific album by album ID.
      parameters:
        - in: path
          name: album_id
          required: true
          schema:
            type: integer
          description: The ID of the album.
      responses:
        '200':
          description: A list of tracks for the specified album
          content:
            application/json:
              schema:
                type: object
                properties:
                  album_title:
                    type: string
                  tracks:
                    type: array
                    items:
                      type: string

  /artists/:
    get:
      summary: Get the list of artists
      description: Retrieve a list of artists from the database with optional filtering by name.
      parameters:
        - in: query
          name: skip
          schema:
            type: integer
            default: 0
          description: The number of artists to skip.
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: The number of artists to return.
        - in: query
          name: name
          schema:
            type: string
          description: The artist name to filter by.
      responses:
        '200':
          description: A list of artists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Artist'

  /artists/{artist_id}/:
    get:
      summary: Get a specific artist
      description: Retrieve a specific artist by artist ID.
      parameters:
        - in: path
          name: artist_id
          required: true
          schema:
            type: integer
          description: The ID of the artist.
      responses:
        '200':
          description: An artist object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'

  /artists/{artist_id}/albums/:
    get:
      summary: Get albums for a specific artist
      description: Retrieve albums associated with a specific artist by artist ID.
      parameters:
        - in: path
          name: artist_id
          required: true
          schema:
            type: integer
          description: The ID of the artist.
      responses:
        '200':
          description: A list of albums for the specified artist
          content:
            application/json:
              schema:
                type: object
                properties:
                  artist_name:
                    type: string
                  albums:
                    type: array
                    items:
                      type: string

  /artists/:
    post:
      summary: Add a new artist
      description: Create a new artist in the database.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: The newly created artist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Artist'

  /artists/{artist_id}/:
    put:
      summary: Update an artist's name
      description: Update the name of an existing artist by artist ID.
      parameters:
        - in: path
          name: artist_id
          required: true
          schema:
            type: integer
          description: The ID of the artist.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

  /artists/:
    delete:
      summary: Delete an artist by name
      description: Remove an artist from the database by name.
      parameters:
        - in: query
          name: name
          required: true
          schema:
            type: string
          description: The name of the artist.
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  artist:
                    $ref: '#/components/schemas/Artist'

  /artists/{artist_id}/:
    delete:
      summary: Delete an artist by ID
      description: Remove an artist from the database by artist ID.
      parameters:
        - in: path
          name: artist_id
          required: true
          schema:
            type: integer
          description: The ID of the artist.
      responses:
        '200':
          description: Confirmation message
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string

components:
  schemas:
    Track:
      type: object
      properties:
        trackId:
          type: integer
        name:
          type: string
        albumId:
          type: integer
        mediaTypeId:
          type: integer
        genreTypeId:
          type: integer
        composer:
          type: string
        milliseconds:
          type: integer
        bytes:
          type: integer
        unit_price:
          type: number
          format: float
        album:
          $ref: '#/components/schemas/Album'
        media_type:
          $ref: '#/components/schemas/MediaType'
        genre:
          $ref: '#/components/schemas/Genre'
    Album:
      type: object
      properties:
        albumId:
          type: integer
        artistId:
          type: integer
        title:
          type: string
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
        artist:
          $ref: '#/components/schemas/Artist'
    Artist:
      type: object
      properties:
        artistId:
          type: integer
        name:
          type: string
        albums:
          type: array
          items:
            $ref: '#/components/schemas/Album'
    MediaType:
      type: object
      properties:
        mediaTypeId:
          type: integer
        name:
          type: string
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
    Genre:
      type: object
      properties:
        genreId:
          type: integer
        name:
          type: string
        tracks:
          type: array
          items:
            $ref: '#/components/schemas/Track'
